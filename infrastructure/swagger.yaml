openapi: 3.0.0
info:
  title: Smultron API
  version: 1.0.0
  description: E-commerce API for products, categories, and orders management

servers:
  - url: /v1
    description: API Server (uses current domain)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required:
        - id
        - category
        - brand
        - title
        - price
        - stock
        - image
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        category:
          type: string
        article:
          type: string
        brand:
          type: string
        title:
          type: string
        subtitle:
          type: string
        price:
          type: number
        price_reduced:
          type: number
        description:
          type: array
          items:
            type: string
        tag:
          type: string
        index:
          type: integer
        stock:
          type: integer
        max_order:
          type: integer
        image:
          type: string
        images:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive]
          description: Product visibility status. Only 'active' products are shown in public endpoints.
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the product was created
        updatedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the product was last updated

    Category:
      type: object
      properties:
        id:
          type: string
        brand:
          type: string
        title:
          type: string
        subtitle:
          type: string
        index:
          type: integer
        status:
          type: string
          enum: [active, inactive]
          description: Whether the category is active/visible to public users

    Order:
      type: object
      properties:
        id:
          type: string
        cart:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        order:
          $ref: '#/components/schemas/OrderDetails'
        total:
          type: number
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItem:
      type: object
      required:
        - id
        - price
        - number
      properties:
        id:
          type: string
          description: Product ID
        price:
          type: number
          description: Price at time of order
        number:
          type: integer
          minimum: 1
          description: Quantity

    OrderDetails:
      type: object
      required:
        - name
        - address
        - zip
        - city
        - phone
        - delivery
        - payment
      properties:
        name:
          type: string
        company:
          type: string
        address:
          type: string
        zip:
          type: string
        city:
          type: string
        phone:
          type: string
        delivery:
          type: string
          description: Delivery method (e.g., postnord, dhl)
        payment:
          type: string
          description: Payment method (e.g., swish, card)

    OrderItem:
      type: object
      description: Legacy order item format (deprecated)
      properties:
        productId:
          type: string
        quantity:
          type: integer
        price:
          type: number

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /auth/login:
    post:
      summary: Admin login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/products:
    get:
      summary: List products (Admin)
      description: |
        Get paginated list of products with filtering, search, and sorting.
        
        **Performance Notes:**
        - Uses DynamoDB Global Secondary Index (GSI) for efficient status filtering
        - Status filter queries use GSI directly for optimal performance
        - No status filter performs full table scan
        
        **Filtering:**
        - Status filtering is optimized with GSI on status + createdAt
        - Search performs in-memory filtering on results
        - Results are sorted in-memory after retrieval
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by product status
          required: false
          schema:
            type: string
            enum: [active, inactive]
        - name: q
          in: query
          description: Search query (searches title, subtitle, brand, description)
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction (prefix with - for descending). Use 'index' for manual custom sorting.
          required: false
          schema:
            type: string
            enum: [createdAt, -createdAt, updatedAt, -updatedAt, id, -id, title, -title, index, -index]
            default: -createdAt
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
                      sort:
                        type: string
                      filters:
                        type: object
                        properties:
                          status:
                            type: array
                            items:
                              type: string
                            nullable: true
                          q:
                            type: string
                            nullable: true
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                      next:
                        type: string
                        nullable: true
                      prev:
                        type: string
                        nullable: true
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new product (Admin)
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - category
                - brand
                - title
                - price
                - index
                - stock
                - image
              properties:
                category:
                  type: string
                article:
                  type: string
                brand:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                price:
                  type: number
                price_reduced:
                  type: number
                description:
                  type: array
                  items:
                    type: string
                tag:
                  type: string
                index:
                  type: integer
                stock:
                  type: integer
                max_order:
                  type: integer
                image:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                status:
                  type: string
                  enum: [active, inactive]
                  default: active
                  description: Product visibility status. Defaults to 'active' if not specified.
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/products/indexes:
    patch:
      summary: Bulk update product indexes (Admin)
      description: Update index values for multiple products at once. This allows for manual custom sorting of products.
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updates
              properties:
                updates:
                  type: array
                  minItems: 1
                  maxItems: 100
                  items:
                    type: object
                    required:
                      - id
                      - index
                    properties:
                      id:
                        type: string
                        description: Product ID
                      index:
                        type: integer
                        description: New index value for sorting
            example:
              updates:
                - id: "product-1"
                  index: 1
                - id: "product-2"
                  index: 2
                - id: "product-3"
                  index: 3
      responses:
        '200':
          description: Indexes updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
                  message:
                    type: string
        '400':
          description: Validation error or some updates failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/products/{id}:
    get:
      summary: Get product by ID with categories (Admin)
      description: Returns a single product (active or inactive) with a list of all categories. This is an admin endpoint that shows all products regardless of status.
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details with categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    description: All available categories
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          type: string
                  status:
                    type: string
                    enum: [active, inactive]
                  id:
                    type: string
                  category:
                    type: string
                  title:
                    type: string
                  subtitle:
                    type: string
                  brand:
                    type: string
                  price:
                    type: number
                  stock:
                    type: integer
                  description:
                    type: array
                    items:
                      type: string
                  image:
                    type: string
                  images:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a product (Admin)
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                article:
                  type: string
                brand:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                price:
                  type: number
                price_reduced:
                  type: number
                description:
                  type: array
                  items:
                    type: string
                tag:
                  type: string
                index:
                  type: integer
                stock:
                  type: integer
                max_order:
                  type: integer
                image:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                status:
                  type: string
                  enum: [active, inactive]
                  description: Update product visibility status. Change to 'inactive' to hide from public endpoints.
      responses:
        '200':
          description: Product updated (updatedAt timestamp is automatically set)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a product (Admin)
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /catalog:
    get:
      summary: Get complete catalog (categories and products)
      description: Returns both categories and active products in a single request for improved performance. Only products with status 'active' are included. Both categories and products are sorted alphabetically by title. Response structure matches admin endpoints format.
      tags:
        - Catalog (Public)
      responses:
        '200':
          description: Complete catalog with categories and active products
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Total number of active categories
                  products:
                    type: object
                    properties:
                      data:
                        type: array
                        description: Only active products are returned
                        items:
                          $ref: '#/components/schemas/Product'
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Total number of active products

  /admin/categories/indexes:
    patch:
      summary: Bulk update category indexes (Admin)
      description: Update index values for multiple categories at once. This allows for manual custom sorting of categories.
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updates
              properties:
                updates:
                  type: array
                  minItems: 1
                  maxItems: 100
                  items:
                    type: object
                    required:
                      - id
                      - index
                    properties:
                      id:
                        type: string
                        description: Category ID
                      index:
                        type: integer
                        description: New index value for sorting
            example:
              updates:
                - id: "labubu"
                  index: 1
                - id: "sonny-angel"
                  index: 2
                - id: "skullpanda"
                  index: 3
      responses:
        '200':
          description: Indexes updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
                  message:
                    type: string
        '400':
          description: Validation error or some updates failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/categories:
    get:
      summary: List all categories (Admin)
      description: Returns all categories with optional filtering and sorting. Admin authentication required. Default sort is by title (alphabetical).
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [active, inactive]
          description: Filter categories by status (active or inactive)
        - name: sort
          in: query
          description: Sort field and direction (prefix with - for descending)
          required: false
          schema:
            type: string
            enum: [id, -id, title, -title, brand, -brand, index, -index]
            default: title
      responses:
        '200':
          description: List of categories with metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total number of categories
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new category (Admin)
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - brand
                - title
                - index
              properties:
                brand:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                index:
                  type: integer
                status:
                  type: string
                  enum: [active, inactive]
                  default: active
                  description: Whether the category is active/visible to public users
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/categories/{id}:
    get:
      summary: Get category by ID (Admin)
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a category (Admin)
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                index:
                  type: integer
                status:
                  type: string
                  enum: [active, inactive]
                  description: Whether the category is active/visible to public users
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a category (Admin)
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    post:
      summary: Create a new order
      description: Creates a new order and decreases stock for ordered products
      tags:
        - Orders (Public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cart
                - order
              properties:
                cart:
                  type: array
                  items:
                    $ref: '#/components/schemas/CartItem'
                order:
                  $ref: '#/components/schemas/OrderDetails'
            example:
              cart:
                - id: "labubu-labubu-1760164608843-7wfhd2wyn"
                  price: 599
                  number: 1
                - id: "sonny-angel-christmas-1760164608843-abc123"
                  price: 599
                  number: 2
              order:
                name: "Bernhard"
                company: "ZwC"
                address: "Varmfrontsgatan 18"
                zip: "128 33"
                city: "Stockholm"
                phone: "0793513563"
                delivery: "postnord"
                payment: "swish"
      responses:
        '201':
          description: Order created successfully, stock decreased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request or insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List all orders
      tags:
        - Orders (Admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      summary: Get order by ID
      tags:
        - Orders (Admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}/status:
    put:
      summary: Update order status
      tags:
        - Orders (Admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
